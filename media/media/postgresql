postgresql

*PAGER
\pset pager off
\pset pager on
\pset pager always


*Display o display table
\d
\dt


*crear DB
CREATE DATABASE dbname;


*mostrar db's
/l


*conectar a db
\c dbname;


*drop DB
DROP DATABASE dbname;


*Crear DB
CREATE TABLE table_name(
   column1 datatype,
   column2 datatype,
   column3 datatype,
   .....
   columnN datatype,
   PRIMARY KEY( one or more columns )
);


*Botar tabla
DROP TABLE table_name;


*Crear schema
CREATE SCHEMA name;


*insertar query
INSERT INTO TABLE_NAME (column1, column2, column3,...columnN)
VALUES (value1, value2, value3,...valueN);


*seleccionar query
SELECT column1, column2, columnN FROM table_name;


*Expresiones
SELECT column1, column2, columnN
FROM table_name
WHERE [CONTION | EXPRESSION];


*And o OR
SELECT column1, column2, columnN
FROM table_name
WHERE [condition1] AND/or [condition2]...AND/or [conditionN];


*Update query
UPDATE table_name
SET column1 = value1, column2 = value2...., columnN = valueN
WHERE [condition];


*Delete query
DELETE FROM table_name
WHERE [condition];


*Like query
SELECT FROM table_name
WHERE column LIKE 'XXXX%'


*Ejemplo con Limit
SELECT * FROM COMPANY LIMIT 4;


*Order by
SELECT * FROM COMPANY ORDER BY AGE ASC;


*Group by
SELECT NAME, SUM(SALARY) FROM COMPANY GROUP BY NAME;


*Distinto
SELECT DISTINCT name FROM COMPANY;


* para trabajar con textos en numeros -> like // salary es int
WHERE SALARY::text LIKE '200%'

*ROW TO JSON
select row_to_json(row(id, name)) from company;